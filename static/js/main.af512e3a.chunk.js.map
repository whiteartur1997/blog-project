{"version":3,"sources":["api/api.ts","bll/app-reducer.ts","components/Posts/Post/Post.tsx","components/Posts/Posts.tsx","components/AddPost/AddPost.tsx","components/Modal/Modal.tsx","components/PostPage/PostPage.tsx","components/Error/Error.tsx","App.tsx","bll/store.ts","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","postsApi","get","postId","title","body","post","id","put","delete","comment","initialState","isInitializing","isLoading","posts","postData","modalIsOpen","error","removePost","dispatch","a","setLoading","removePostOnSuccess","setError","message","setPostsOnSuccess","type","setPostOnSuccess","addPostOnSuccess","editPostOnSuccess","addCommentOnSuccess","setInit","value","init","loading","useStyles","makeStyles","root","maxWidth","margin","leftAlign","textAlign","postTitle","textDecoration","Post","classes","useDispatch","Card","className","CardContent","to","pathname","state","modalIsOpenProp","Typography","gutterBottom","variant","component","style","color","CardActions","Button","size","onClick","Posts","useSelector","Grid","container","direction","justify","alignItems","map","theme","createStyles","display","flexDirection","flexWrap","padding","form","width","textFieldTitle","spacing","textFieldBody","button","AddPost","formik","useFormik","initialValues","validate","values","errors","length","onSubmit","res","data","resetForm","handleSubmit","TextField","label","placeholder","name","onChange","handleChange","touched","Boolean","helperText","multiline","rows","paper","position","top","left","transform","backgroundColor","palette","background","border","boxShadow","shadows","justifyContent","textField","ModalComponent","props","getState","currentPost","comments","closeModal","Modal","onClose","open","PostPage","location","useLocation","startModalIsOpen","useState","setModalIsOpen","useParams","postDeleted","setPostDeleted","addComment","useEffect","getPost","Container","fixed","index","cursor","fullWidth","Alert","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","autoHideDuration","severity","App","reverse","LinearProgress","zIndex","CircularProgress","exact","path","render","store","createStore","action","filter","applyMiddleware","thunk","window","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af512e3a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://bloggy-api.herokuapp.com\",\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\nexport const postsApi = {\r\n    getPosts() {\r\n        return instance.get<IPostType[]>('/posts')\r\n    },\r\n    getPost(postId: string | number) {\r\n        return instance.get<IPostWithCommentsType>(`/posts/${postId}?_embed=comments`)\r\n    },\r\n    addPost(title: string, body: string) {\r\n        return instance.post<IPostType>('/posts', {title, body})\r\n    },\r\n    editPost({id, title, body}: IPostType) {\r\n        return instance.put<IPostType>(`/posts/${id}`, { title, body})\r\n    },\r\n    removePost(postId: string | number) {\r\n        return instance.delete<{}>(`/posts/${postId}`,)\r\n    },\r\n    addComment(postId: number, comment: string) {\r\n        return instance.post('/comments', {postId, comment})\r\n    }\r\n}\r\n\r\n// types\r\nexport interface IPostType {\r\n    title: string\r\n    body: string\r\n    id: number\r\n}\r\nexport interface IPostWithCommentsType extends IPostType{\r\n    comments: CommentType[]\r\n}\r\nexport type CommentType = {\r\n    comment: string\r\n    id: number\r\n    postId: number\r\n}","import {IPostType, IPostWithCommentsType, postsApi} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState = {\r\n    isInitializing: true as boolean,\r\n    isLoading: false as boolean,\r\n    posts: [] as IPostType[],\r\n    postData: null as IPostWithCommentsType | null,\r\n    modalIsOpen: false as boolean,\r\n    error: null as string | null\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case \"SET-POSTS\":\r\n            return {...state, posts: action.posts}\r\n        case \"SET-POST\":\r\n            return {...state, postData: action.post}\r\n        case \"ADD-POST\":\r\n            return {...state, posts: [action.post, ...state.posts]}\r\n        case \"ADD-COMMENT\":\r\n            return {\r\n                ...state,\r\n                postData: action.post\r\n            }\r\n        case \"EDIT-POST\":\r\n            return {\r\n                ...state,\r\n                postData: action.post,\r\n                posts: state.posts.map(post => {\r\n                    return post.id === action.post?.id\r\n                        ? {id: action.post.id, title: action.post.title, body: action.post.body}\r\n                        : post\r\n                })\r\n            }\r\n        case \"REMOVE-POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id !== action.postId),\r\n                postData: null\r\n            }\r\n        case \"SET-INIT\":\r\n            return {...state, isInitializing: action.init}\r\n        case \"SET-LOADING\":\r\n            return {...state, isLoading: action.loading}\r\n        case \"SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// thunks\r\nexport const getPosts = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const res = await postsApi.getPosts();\r\n        dispatch(setPostsOnSuccess(res.data.reverse()));\r\n    } catch (e) {\r\n        dispatch(setError(e.message));\r\n    } finally {\r\n        dispatch(setInit(false));\r\n    }\r\n}\r\n\r\nexport const getPost = (postId: number | string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setLoading(true));\r\n        const res = await postsApi.getPost(postId);\r\n        dispatch(setPostOnSuccess(res.data))\r\n    } catch (e) {\r\n        dispatch(setError(e.message));\r\n    } finally {\r\n        dispatch(setLoading(false));\r\n    }\r\n}\r\n\r\nexport const addPost = (title: string, body: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setLoading(true));\r\n        const res = await postsApi.addPost(title, body);\r\n        dispatch(addPostOnSuccess(res.data))\r\n    } catch (e) {\r\n        dispatch(setError(e.message));\r\n    } finally {\r\n        dispatch(setLoading(false))\r\n    }\r\n}\r\n\r\nexport const editPost = (post: IPostType) =>\r\n    async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n        try {\r\n            dispatch(setLoading(true));\r\n            const res = await postsApi.editPost(post);\r\n            let currentPost = getState().postData;\r\n            if (currentPost) {\r\n                currentPost = {...res.data, comments: currentPost.comments}\r\n            }\r\n            dispatch(editPostOnSuccess(currentPost))\r\n        } catch (e) {\r\n            dispatch(setError(e.message));\r\n        } finally {\r\n            dispatch(setLoading(false));\r\n        }\r\n    }\r\n\r\nexport const removePost = (postId: number) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setLoading(true));\r\n        await postsApi.removePost(postId);\r\n        dispatch(removePostOnSuccess(postId))\r\n    } catch (e) {\r\n        dispatch(setError(e.message));\r\n    } finally {\r\n        dispatch(setLoading(false));\r\n    }\r\n}\r\n\r\nexport const addComment = (postId: number, comment: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n        const currentPost = getState().postData;\r\n        try {\r\n            dispatch(setLoading(true));\r\n            const res = await postsApi.addComment(postId, comment);\r\n            if (currentPost) {\r\n                currentPost.comments = [...currentPost.comments, res.data]\r\n                dispatch(addCommentOnSuccess(currentPost))\r\n            }\r\n        } catch (e) {\r\n            dispatch(setError(e.message));\r\n        } finally {\r\n            dispatch(setLoading(false));\r\n        }\r\n    }\r\n\r\n// actions\r\nexport const setPostsOnSuccess = (posts: IPostType[]) => ({\r\n    type: \"SET-POSTS\",\r\n    posts\r\n} as const);\r\n\r\nexport const setPostOnSuccess = (post: IPostWithCommentsType | null) => ({\r\n    type: \"SET-POST\",\r\n    post\r\n} as const);\r\n\r\nexport const addPostOnSuccess = (post: IPostType) => ({\r\n    type: \"ADD-POST\",\r\n    post\r\n} as const);\r\n\r\nexport const editPostOnSuccess = (post: IPostWithCommentsType | null) => ({\r\n    type: \"EDIT-POST\",\r\n    post\r\n} as const);\r\n\r\nexport const removePostOnSuccess = (postId: string | number) => ({\r\n    type: \"REMOVE-POST\",\r\n    postId\r\n} as const);\r\n\r\nexport const addCommentOnSuccess = (post: IPostWithCommentsType) => ({\r\n    type: \"ADD-COMMENT\",\r\n    post\r\n} as const);\r\n\r\nexport const setInit = (value: boolean) => ({type: \"SET-INIT\", init: value} as const);\r\n\r\nexport const setLoading = (value: boolean) => ({\r\n    type: \"SET-LOADING\",\r\n    loading: value\r\n} as const);\r\n\r\nexport const setError = (value: string | null) => ({\r\n    type: \"SET-ERROR\",\r\n    error: value\r\n} as const);\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setPostsOnSuccess>\r\n    | ReturnType<typeof setInit>\r\n    | ReturnType<typeof addPostOnSuccess>\r\n    | ReturnType<typeof setLoading>\r\n    | ReturnType<typeof setPostOnSuccess>\r\n    | ReturnType<typeof addCommentOnSuccess>\r\n    | ReturnType<typeof editPostOnSuccess>\r\n    | ReturnType<typeof removePostOnSuccess>\r\n    | ReturnType<typeof setError>;\r\nexport type AppStateType = typeof initialState;\r\n\r\n","import {Button, Card, CardActions, CardContent, makeStyles, Typography} from \"@material-ui/core\";\r\nimport {IPostType} from \"../../../api/api\";\r\nimport {NavLink} from 'react-router-dom'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removePost} from \"../../../bll/app-reducer\";\r\nimport React from \"react\";\r\n\r\ntype PostComponentType = {\r\n    post: IPostType\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n        margin: \"20px\",\r\n    },\r\n    leftAlign: {\r\n        textAlign: \"left\"\r\n    },\r\n    postTitle: {\r\n        textDecoration: \"none\"\r\n    }\r\n});\r\n\r\n\r\nexport const Post: React.FC<PostComponentType> = ({post}) => {\r\n\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const removePostHandler = () => {\r\n        dispatch(removePost(post.id));\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <NavLink to={{\r\n                    pathname: `/posts/${post.id}`,\r\n                    state: {modalIsOpenProp: false}\r\n                }}>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\" style={{textDecoration: 'none'}}\r\n                                className={`${classes.leftAlign} ${classes.postTitle}`}>\r\n                        {post.title}\r\n                    </Typography>\r\n                </NavLink>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className={classes.leftAlign}>\r\n                    {post.body}\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\">\r\n                    <NavLink\r\n                        style={{textDecoration: 'none'}}\r\n                        to={{\r\n                            pathname: `/posts/${post.id}`,\r\n                            state: {modalIsOpenProp: true}\r\n                        }}>\r\n                        Edit\r\n                    </NavLink>\r\n                </Button>\r\n                <Button onClick={removePostHandler} size=\"small\" color=\"secondary\">\r\n                   Delete\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}","import {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/app-reducer\";\r\nimport {IPostType} from \"../../api/api\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nexport const Posts = () => {\r\n    const posts = useSelector<AppStateType, IPostType[]>(state => state.posts);\r\n\r\n    return (\r\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n            {posts.map((post) => {\r\n                return <Post key={post.id} post={post}/>\r\n            })}\r\n        </Grid>\r\n\r\n    )\r\n}","import {Button, Card, createStyles, makeStyles, TextField, Theme, Typography} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPost} from \"../../bll/app-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    title?: string\r\n    body?: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            // maxWidth: \"50%\",\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'flex-start',\r\n            flexWrap: 'wrap',\r\n            padding: \"30px\"\r\n        },\r\n        form: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            width: \"80%\"\r\n        },\r\n        textFieldTitle: {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n            maxWidth: '80%'\r\n        },\r\n        textFieldBody: {\r\n            margin: theme.spacing(1),\r\n            width: '90%'\r\n        },\r\n        button: {\r\n            maxWidth: '30%'\r\n        }\r\n    }),\r\n);\r\n\r\nexport const AddPost = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: '',\r\n            body: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.title) {\r\n                errors.title = \"Title is required!\";\r\n            } else if (values.title.length > 30) {\r\n                errors.title = \"Title should be shorter than 30 symbols!\";\r\n            }\r\n            if (!values.body) {\r\n                errors.body = \"Body text is required\";\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            dispatch(addPost(values.title, values.body));\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    return(\r\n        <Card className={classes.root}>\r\n            <Typography variant=\"h3\" gutterBottom >\r\n                Write new post\r\n            </Typography>\r\n            <form onSubmit={formik.handleSubmit} className={classes.form}>\r\n                <TextField\r\n                    label=\"Title\"\r\n                    placeholder=\"Post title\"\r\n                    className={classes.textFieldTitle}\r\n                    id=\"title\"\r\n                    name=\"title\"\r\n                    value={formik.values.title}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.title && Boolean(formik.errors.title)}\r\n                    helperText={formik.touched.title && formik.errors.title}\r\n                />\r\n                <TextField\r\n                    multiline\r\n                    rows={6}\r\n                    placeholder=\"Type something...\"\r\n                    className={classes.textFieldBody}\r\n                    id=\"body\"\r\n                    name=\"body\"\r\n                    value={formik.values.body}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.body && Boolean(formik.errors.body)}\r\n                    helperText={formik.touched.body && formik.errors.body}\r\n                />\r\n                <Button\r\n                    className={classes.button}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    type=\"submit\">Add post</Button>\r\n            </form>\r\n        </Card>\r\n    )\r\n}","import {Button, createStyles, makeStyles, TextField, Theme, Typography} from \"@material-ui/core\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport {useFormik} from \"formik\";\r\nimport {IPostWithCommentsType} from \"../../api/api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {editPost} from \"../../bll/app-reducer\";\r\n\r\ntype ModalComponentType = {\r\n    postData: IPostWithCommentsType\r\n    open: boolean\r\n    closeModal: () => void\r\n}\r\n\r\ntype FormikErrorType = {\r\n    title?: string\r\n    body?: string\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        paper: {\r\n            position: 'absolute',\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translateY(-50%) translateX(-50%)\",\r\n            width: \"80%\",\r\n            backgroundColor: theme.palette.background.paper,\r\n            border: '2px solid #000',\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n            \"& form\": {\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"flex-start\",\r\n                \"& div\": {\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\"\r\n                }\r\n            }\r\n        },\r\n        textField: {\r\n            margin: \"20px 0\"\r\n        },\r\n        button: {\r\n            maxWidth: \"30%\",\r\n        }\r\n    }),\r\n);\r\n\r\n\r\nexport const ModalComponent:React.FC<ModalComponentType> = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: props.postData.title,\r\n            body: props.postData.body,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.title) {\r\n                errors.title = \"Title is required!\";\r\n            } else if (values.title.length > 30) {\r\n                errors.title = \"Title should be shorter than 30 symbols!\";\r\n            }\r\n            if (!values.body) {\r\n                errors.body = \"Body text is required\";\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            dispatch(editPost({\r\n                id: props.postData.id,\r\n                body: values.body,\r\n                title: values.title\r\n            }))\r\n            props.closeModal();\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    const body = (\r\n        <div className={classes.paper}>\r\n            <Typography variant=\"h4\" gutterBottom >Edit post</Typography>\r\n          <form onSubmit={formik.handleSubmit}>\r\n              <TextField\r\n                  className={classes.textField}\r\n                  label=\"Title\"\r\n                  placeholder=\"Post title\"\r\n                  id=\"title\"\r\n                  name=\"title\"\r\n                  value={formik.values.title}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.title && Boolean(formik.errors.title)}\r\n                  helperText={formik.touched.title && formik.errors.title}\r\n              />\r\n              <TextField\r\n                  className={classes.textField}\r\n                  label=\"Post body\"\r\n                  multiline\r\n                  rows={6}\r\n                  placeholder=\"Type something...\"\r\n                  id=\"body\"\r\n                  name=\"body\"\r\n                  value={formik.values.body}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.touched.body && Boolean(formik.errors.body)}\r\n                  helperText={formik.touched.body && formik.errors.body}\r\n              />\r\n              <div>\r\n                  <Button\r\n                      className={classes.button}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"submit\">Edit post</Button>\r\n                  <Button\r\n                      onClick={props.closeModal}\r\n                      className={classes.button}\r\n                      variant=\"contained\"\r\n                      color=\"secondary\">Cancel</Button>\r\n              </div>\r\n          </form>\r\n        </div>\r\n    );\r\n\r\n    return(\r\n        <Modal onClose={props.closeModal} open={props.open}>\r\n            {body}\r\n        </Modal>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Redirect, useLocation, useParams} from \"react-router\";\r\nimport {addComment, AppStateType, getPost, removePost, setPostOnSuccess} from \"../../bll/app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Button, Card, CardContent, Container, makeStyles, TextField, Typography} from \"@material-ui/core\";\r\nimport {IPostWithCommentsType} from \"../../api/api\";\r\nimport {useFormik} from \"formik\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {ModalComponent} from \"../Modal/Modal\";\r\n\r\ntype FormikErrorType = {\r\n    comment?: string\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    leftAlign: {\r\n        textAlign: \"left\"\r\n    },\r\n    comment: {\r\n        margin: \"10px 0\"\r\n    }\r\n});\r\n\r\n\r\nexport const PostPage = () => {\r\n    let location: { state: any } = useLocation();\r\n    let startModalIsOpen = false;\r\n\r\n    if (location.state?.modalIsOpenProp) {\r\n        startModalIsOpen = location.state.modalIsOpenProp\r\n    }\r\n    const [modalIsOpen, setModalIsOpen] = useState(startModalIsOpen);\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const {postId} = useParams<{ postId: string }>();\r\n    const postData = useSelector<AppStateType, IPostWithCommentsType | null>(state => state.postData);\r\n    const [postDeleted, setPostDeleted] = useState(false);\r\n\r\n\r\n    const removePostHandler = () => {\r\n        dispatch(removePost(+postId));\r\n        setPostDeleted(true);\r\n    }\r\n\r\n    const closeModalHandler = () => {\r\n        setModalIsOpen(false);\r\n    }\r\n\r\n    const openModalHandler = () => {\r\n        setModalIsOpen(true);\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            comment: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.comment) {\r\n                errors.comment = \"Title is required!\";\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            dispatch(addComment(+postId, values.comment));\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        dispatch(getPost(postId));\r\n\r\n        return () => {\r\n            dispatch(setPostOnSuccess(null))\r\n        }\r\n    }, [postId, dispatch])\r\n\r\n    if (postDeleted) {\r\n        return <Redirect to={\"/posts\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className={classes.leftAlign} fixed>\r\n                <NavLink to={\"/posts\"}>Back to posts</NavLink>\r\n                <div>\r\n                    <Typography variant=\"h3\" component=\"h3\">\r\n                        {postData && postData.title}\r\n                    </Typography>\r\n                    <Button onClick={openModalHandler} color=\"primary\">Edit</Button>\r\n                    <Button onClick={removePostHandler} color=\"secondary\">Delete</Button>\r\n                </div>\r\n                <Typography component=\"p\">\r\n                    {postData && postData.body}\r\n                </Typography>\r\n                <Typography variant=\"h6\" component=\"h6\">\r\n                    {postData && \"Comments:\"}\r\n                </Typography>\r\n                {\r\n                    postData && postData.comments.length > 0\r\n                        ? postData && postData.comments.map((comment, index) => {\r\n                        return (\r\n                            <Card className={classes.comment} key={comment.id} variant=\"outlined\">\r\n                                <CardContent>\r\n                                    <Typography>\r\n                                        {\"Comment \" + ++index}\r\n                                    </Typography>\r\n                                    <Typography color=\"textSecondary\">\r\n                                        {comment.comment}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Card>\r\n                        )\r\n                    })\r\n                        : <Typography component=\"p\" gutterBottom={true}>\r\n                            No comments yet. Write the first!\r\n                        </Typography>\r\n                }\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <TextField\r\n                        id=\"comment\"\r\n                        name=\"comment\"\r\n                        label=\"Add Comment\"\r\n                        style={{cursor: \"pointer\"}}\r\n                        placeholder=\"What do you think?\"\r\n                        value={formik.values.comment}\r\n                        onChange={formik.handleChange}\r\n                        error={formik.touched.comment && Boolean(formik.errors.comment)}\r\n                        helperText={formik.touched.comment && formik.errors.comment}\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                    />\r\n                    <Button\r\n                        style={{cursor: \"pointer\"}}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\">Add comment</Button>\r\n                </form>\r\n            </Container>\r\n            {modalIsOpen && postData && <ModalComponent\r\n                closeModal={closeModalHandler}\r\n                postData={postData}\r\n                open={modalIsOpen} />}\r\n        </>\r\n    )\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\";\r\nimport {AppStateType, setError} from \"../../bll/app-reducer\";\r\nimport {Snackbar} from \"@material-ui/core\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppStateType, string | null>(state => state.error);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setError(null));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType, getPosts} from \"./bll/app-reducer\";\nimport {CircularProgress, Container, LinearProgress} from \"@material-ui/core\";\nimport {Posts} from \"./components/Posts/Posts\";\nimport {AddPost} from \"./components/AddPost/AddPost\";\nimport {Redirect, Route, Switch} from \"react-router\";\nimport {PostPage} from \"./components/PostPage/PostPage\";\nimport {ErrorSnackbar} from \"./components/Error/Error\";\n\nexport function App() {\n\n    const dispatch = useDispatch();\n    const isInitializing = useSelector<AppStateType, boolean>(state => state.isInitializing);\n    const isLoading = useSelector<AppStateType, boolean>(state => state.isLoading);\n\n    useEffect(() => {\n        dispatch(getPosts());\n    }, [dispatch])\n\n    return (\n        <div className=\"App\">\n            {isLoading && <LinearProgress\n                color=\"secondary\"\n                style={{position: \"fixed\", top: 0, left: 0, width: \"100%\", zIndex: 99}}/>}\n            {\n                isInitializing\n                    ? <CircularProgress/>\n                    : <Container fixed>\n                        <Switch>\n                            <Route exact path=\"/\" render={() => <Redirect to={\"/posts\"}/>}/>\n                            <Route exact path=\"/posts\" render={() => <>\n                                <AddPost/>\n                                <Posts/>\n                            </>}/>\n                            <Route path={\"/posts/:postId?\"} render={() => <PostPage />}/>\n                            <Route path={\"/*\"} render={() => <div>Page not found!</div>}/>\n                        </Switch>\n                    </Container>\n            }\n            <ErrorSnackbar />\n        </div>\n    );\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport const store = createStore(appReducer, applyMiddleware(thunk));\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\nimport {HashRouter} from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}